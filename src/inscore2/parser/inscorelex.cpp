#line 2 "inscorelex.cpp"

#line 4 "inscorelex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE INSCOREV2restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE INSCOREV2lex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via INSCOREV2restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void INSCOREV2restart (FILE *input_file ,yyscan_t yyscanner );
void INSCOREV2_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE INSCOREV2_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void INSCOREV2_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void INSCOREV2_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void INSCOREV2push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void INSCOREV2pop_buffer_state (yyscan_t yyscanner );

static void INSCOREV2ensure_buffer_stack (yyscan_t yyscanner );
static void INSCOREV2_load_buffer_state (yyscan_t yyscanner );
static void INSCOREV2_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER INSCOREV2_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE INSCOREV2_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE INSCOREV2_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE INSCOREV2_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *INSCOREV2alloc (yy_size_t ,yyscan_t yyscanner );
void *INSCOREV2realloc (void *,yy_size_t ,yyscan_t yyscanner );
void INSCOREV2free (void * ,yyscan_t yyscanner );

#define yy_new_buffer INSCOREV2_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        INSCOREV2ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            INSCOREV2_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        INSCOREV2ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            INSCOREV2_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define INSCOREV2wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 85
#define YY_END_OF_BUFFER 86
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[283] =
    {   0,
        0,    0,   78,   78,   86,   84,   82,   83,   83,   18,
       84,   62,   84,   16,   84,   52,   53,   15,   12,   60,
       13,   84,   51,    1,   59,   58,   22,   27,   20,   17,
       64,   56,   57,   65,   64,   64,   54,   84,   55,   78,
       78,   85,   82,   83,    0,   66,    0,   62,    0,   68,
        0,   67,    0,    0,   69,    0,    0,   69,    2,    0,
       69,    0,    3,    0,   69,    0,   14,   72,    5,    1,
       65,    0,   65,   65,   65,   10,   23,    0,   19,   21,
       64,    0,    0,    0,   65,   64,   64,    0,    0,   78,
       78,    0,   77,   66,   68,   67,    0,    0,    0,   69,

        5,   69,   69,    0,    5,   69,   79,   61,    4,    5,
        1,   69,   69,    7,    0,   11,    0,    0,   70,    0,
        0,    0,    0,   65,   64,   64,   71,    0,    0,   63,
        5,    7,    0,    5,    7,    0,    5,    0,    0,   10,
        1,    7,    0,   70,    0,    0,    0,    0,    0,   65,
       64,    9,   71,    0,    0,    0,    0,    5,    0,    5,
        0,    0,   10,    0,    0,    6,   11,    5,    0,    0,
        0,    0,    0,    0,   65,    0,    6,   80,    5,    0,
        0,    5,    5,    0,    0,    0,    0,    0,   65,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    5,    0,   73,   74,    0,    8,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   28,   40,
        0,   26,   41,   25,   24,   44,    0,    0,   29,    0,
       30,    0,    0,   81,    0,    0,   75,   31,   32,   33,
       46,   47,   34,    0,    0,   43,   50,    0,   35,   45,
       36,   80,    0,   37,   38,   39,   48,   42,   49,    0,
       76,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,    1,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   23,   23,   23,   23,   23,   23,   24,   25,   26,
       27,   28,   29,    1,   30,   30,   30,   31,   32,   30,
       30,   30,   30,   30,   30,   30,   30,   33,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       34,   35,   36,    1,   37,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   47,   30,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       30,   30,   61,   62,   63,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[64] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    4,    1,
        1,    1,    1,    5,    5,    6,    7,    8,    1,    9,
        9,    9,    9,   10,    1,    1,    1,    1,    5,   11,
       11,   11,   11,   12,    1,   13,   14,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       12,   15,    1
    } ;

static yyconst flex_int16_t yy_base[311] =
    {   0,
        0,    0,   61,   63,  580, 1224,   66,   66,   69, 1224,
       67,    0,  562, 1224,   64,  554, 1224,   42,   62, 1224,
      111,  549,   73,  160, 1224, 1224,   59,  530,  529,   46,
      208,   99, 1224,   80,  256,   43,    0,  129, 1224,  108,
      135,  518,   96,  139,  120, 1224,  123,    0,  527,    0,
       80, 1224,  136,   96,  125,    0,    0,  140,  150,  178,
      304,    0,  196,  183,  226,  487, 1224, 1224,  231,  353,
      242,  266,  281,  284,  433,    0, 1224,  306, 1224, 1224,
      438,  424,  314,  409,  330,  131,  132,  388,  363,  150,
      252,  400, 1224,  150,    0,  155,  104,  206,  253,  376,

      399,  419,  334,  398,  433,  442,  427, 1224, 1224,  448,
      452,  457,  464,  472,  478,    0,  311,  369,    0,  375,
      371,  487,  223,  497,   68,  189,    0,  499,  512,  278,
      517,  521,  296,  527,  542,  531,  555,  568,  305,  325,
      578,  585,  330,    0,  361,  343,  591,  345,  334,  602,
      138,  310,    0,  600,  617,  354,  604,  623,  630,  634,
        0,  388,  385,  638,  396,  508,  399,  662,  302,  648,
        0,    0,  321,  294,  659,  683,  669,  677,    0,  681,
      687,  693,  722,  254,  726,  266,  443,    0,  736,  701,
      716,  190,  282,  313,  374,  406,  465,  543,  471,  362,

      754,  761,  765,  771,  235, 1224, 1224,    0,  784,  611,
      569,  657,  548,  706,  662,  709,  782,  784,  736,  745,
      478,  791,  786,  796,  793,  798,  801,  806,  834,  838,
      843,  207,  207,  813,  820,  822,  817,  688,  851,  853,
      856,  858,  863,  865,  868,  870,  873,  875,  877,  880,
      882,  888,  895,  908,  917,  193, 1224,  902,  924,  925,
      895,  926,  927,  928,  935,  936,  938,  939,  940,  943,
      947,  912,  183,  948,  950,  955,  957,  959,  960,  168,
     1224, 1224,  984,  999, 1014, 1026, 1037, 1048, 1058, 1069,
     1079, 1091, 1101, 1110, 1124, 1131, 1145, 1158, 1166, 1175,

     1183, 1190,  504, 1200, 1208, 1212,  196,  185,   93,   82
    } ;

static yyconst flex_int16_t yy_def[311] =
    {   0,
      282,    1,  283,  283,  282,  282,  282,  282,  282,  282,
      284,  285,  286,  282,  287,  282,  282,  288,  288,  282,
      289,  282,  282,  290,  282,  282,  282,  282,  282,  288,
      291,  292,  282,  293,  291,   35,  294,  282,  282,  295,
      295,  295,  282,  282,  284,  282,  284,  285,  286,  296,
      287,  282,  287,  297,  288,  298,  294,   19,   19,  282,
      289,  299,   61,  282,   63,  282,  282,  282,  299,  290,
       70,  292,  293,   71,   71,   71,  282,  282,  282,  282,
       35,  298,  298,  300,  293,   35,   35,  294,  282,  295,
      295,  295,  282,  284,  296,  287,  297,  297,  297,  288,

      282,   19,   63,  301,  299,   61,  282,  282,  282,  301,
       70,  288,   63,   71,  282,   71,  282,  282,  302,  282,
      282,  303,  298,  293,   35,   35,  304,  282,  282,  297,
      282,  288,  305,  301,   63,  299,  305,  305,  305,  305,
       70,  282,  282,  302,  282,  282,  282,  306,  282,  293,
       35,   35,  304,  282,  282,  305,  282,  305,  110,  137,
      138,  305,  305,  282,  138,  138,  305,  299,  282,  282,
      307,  308,  282,  282,  293,  299,  282,  282,  158,  299,
      137,  137,  110,  282,  282,  282,  306,  309,  293,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,

      110,  137,  299,  137,  282,  282,  282,  310,  293,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  137,  282,  228,
      201,  282,  282,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  228,  282,  282,  228,  282,  282,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  282,  282,  305,  305,  305,  305,  305,  305,  282,
      282,    0,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,

      282,  282,  282,  282,  282,  282,  282,  282,  282,  282
    } ;

static yyconst flex_int16_t yy_nxt[1288] =
    {   0,
        6,    7,    8,    9,    7,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       24,   24,   24,   25,   26,   27,   28,   29,   30,   31,
       31,   31,   31,   32,    6,   33,   34,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   35,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   36,   31,
       37,   38,   39,   41,   41,   41,   41,   43,   44,   44,
       43,   44,   44,   46,   52,   56,   58,   67,   58,   56,
       81,   59,   59,   59,   59,   77,   68,   78,   87,   42,
       52,   42,  233,   55,   55,   56,   55,   43,   53,   98,

       43,   47,   57,  208,   82,   81,   57,   98,   55,   99,
       91,   91,  151,   72,   53,   82,   85,   99,   83,   83,
       83,   83,   57,   60,   55,   58,   46,   61,   62,   94,
       63,   63,   63,   63,   64,   82,   92,   91,   91,   55,
       57,   44,   44,   60,   56,   60,   96,   55,   89,   89,
       89,   89,   91,   91,   47,  176,   46,   47,   56,  100,
      100,  100,  100,   92,   55,   52,   55,  101,   81,   81,
       53,   57,   60,   55,   55,   81,   65,   69,   92,   70,
       70,   70,   70,   64,   47,   57,  125,  126,   55,   53,
       60,  102,   60,   72,   60,  187,   73,   89,   89,   89,

       89,   74,  107,  107,  107,  107,  186,   62,   75,   98,
       55,  282,   65,  105,   76,   63,   63,   63,   63,   99,
       57,   55,   55,  281,   65,   62,   81,   71,   71,   71,
       71,   64,  109,  152,  280,  109,   55,  106,  273,   60,
      149,   72,  257,   62,   73,   65,   65,   65,   65,  216,
      110,  110,  110,  110,   91,   91,   98,  282,  119,   62,
      256,   71,   71,   71,   71,  130,   99,   65,   57,   55,
       55,   82,   65,   62,  232,   71,   71,   71,   71,   64,
       92,   98,   82,   71,   55,   83,   83,   83,   83,   72,
       71,   99,   73,   86,   55,   55,   71,   55,  112,   62,

      113,  207,   82,  114,  114,  114,  114,  117,  205,   55,
      117,  188,  117,   62,   72,  117,   57,   55,   58,  157,
       61,   62,   62,  103,  103,  103,  103,   64,  157,  217,
       62,  120,   55,   83,   83,   83,   83,   56,  149,  184,
       55,   57,   62,   55,   55,  115,   55,   81,  157,  119,
      218,  174,  118,  103,  103,  103,  103,  118,   55,  167,
      171,  124,  121,   72,   57,   60,   55,   55,  172,   65,
       69,   62,  111,  111,  111,  111,   64,  157,  170,   62,
      128,   55,   89,   89,   89,   89,   72,  169,  146,   73,
       57,   62,  145,  101,   74,  100,  100,  100,  100,  227,

      109,   75,   62,  109,  129,   62,  143,   76,  157,   56,
      282,  157,  156,   57,   82,   62,   62,  102,  131,  131,
      131,  131,  157,   62,  219,   82,  121,  282,   82,   82,
       82,   82,  122,  112,  109,  112,   57,  109,  132,  132,
      132,  132,  167,  220,  119,   82,  107,  107,  107,  107,
      127,  221,  134,  134,  134,  134,  112,  282,  113,  119,
      282,  135,  135,  135,  135,  136,  282,  137,  137,  137,
      137,  141,  141,  141,  141,   81,  132,  132,  132,  132,
      115,   62,   62,  135,  135,  135,  135,  116,   62,  138,
       56,  114,  114,  114,  114,   62,  139,  142,  142,  142,

      142,  157,  140,  115,  108,   65,  147,  147,  147,  147,
       55,   55,  148,   55,  148,  222,  225,   57,  154,  154,
      154,  154,  282,  226,  156,   55,  115,  245,  115,  150,
       72,  142,  142,  142,  142,   49,  131,  131,  131,  131,
      132,  132,  132,  132,   62,   93,  158,  158,  158,  158,
      159,  159,  159,  159,   56,   80,   79,   57,  155,   62,
       62,  135,  135,  135,  135,   62,   66,   54,  138,  282,
       49,  157,  136,  115,  160,  160,  160,  160,  157,  282,
      223,   57,  164,   65,  165,   62,   62,  166,  166,  166,
      166,  157,  157,  224,  282,  168,  161,  141,  141,  141,

      141,  237,  282,  162,  142,  142,  142,  142,  120,  163,
      147,  147,  147,  147,  235,   55,   55,  282,   55,  154,
      154,  154,  154,  178,  178,  178,  178,  282,   62,  164,
       55,  164,  175,  164,  157,   72,  177,  177,  177,  177,
       62,  155,  179,  179,  179,  179,  157,  180,  282,  181,
      181,  181,  181,  182,  182,  182,  182,  177,  177,  177,
      177,  234,   57,  109,  161,  282,  109,  185,  185,  185,
      185,  133,   55,   55,   62,   55,  282,  282,  164,   62,
      157,  183,  183,  183,  183,  157,  282,   55,  177,  177,
      177,  177,   72,  282,  236,  189,  178,  178,  178,  178,

      201,  201,  201,  201,  180,   62,  202,  202,  202,  202,
      203,  157,  182,  182,  182,  182,  239,  282,   62,   57,
      190,  282,  191,   62,  192,  193,   62,  194,  156,  157,
      195,  196,  157,   62,  197,  262,  198,  199,  200,  203,
      210,  204,  204,  204,  204,  185,  185,  185,  185,   55,
       55,  238,   55,   62,  213,  211,  212,  214,  282,  157,
      240,  206,   62,  282,   55,  282,  215,  282,  157,   72,
      282,  203,  209,  228,  228,  228,  228,  229,  180,  243,
      230,  230,  230,  230,  231,  231,  231,  231,  203,  282,
      182,  182,  182,  182,  282,  133,   57,   55,   55,   62,

       55,   62,  156,   62,  244,  157,  282,  157,   62,  157,
       62,  282,   55,   62,  157,   62,  157,   72,   62,  157,
      282,  157,  282,  203,  157,  252,  252,  252,  252,  253,
       62,  282,  241,  282,   62,  247,  157,   62,  242,   62,
      157,  282,  249,  157,   57,  157,  282,  156,  282,  246,
      251,  250,  248,  254,  254,  254,  254,  230,  230,  230,
      230,  157,  255,  255,  255,  255,  282,  258,   62,  259,
       62,  260,  261,   62,  157,   62,  157,  282,  282,  157,
       62,  157,   62,  265,  266,   62,  157,   62,  157,  282,
       62,  157,   62,  157,   62,  263,  157,   62,  157,   62,

      157,  282,  282,  157,  282,  157,  264,  230,  230,  230,
      230,  282,   62,  267,  272,  272,  272,  272,  157,   62,
      282,  269,  282,  282,  268,  157,  271,  254,  254,  254,
      254,  272,  272,  272,  272,  270,  230,  230,  230,  230,
      157,   62,   62,   62,   62,   62,  274,  157,  157,  157,
      157,  157,   62,   62,  278,   62,   62,   62,  157,  157,
       62,  157,  157,  157,   62,   62,  157,   62,  275,  276,
      157,  157,   62,  157,   62,  282,   62,   62,  157,  279,
      157,  277,  157,  157,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   48,  282,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   50,
      282,  282,  282,  282,   50,  282,   50,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   55,  282,   55,  282,   55,  282,   55,   55,
      282,   55,   65,  282,   65,   65,   65,   65,   65,   65,
      282,   65,   65,   71,  282,   71,   71,   71,   71,   71,
       71,  282,   71,   81,  282,   81,   81,   81,   81,   81,
       81,  282,   81,   84,  282,  282,  282,   84,  282,   84,

      282,   84,  282,  282,   84,   73,  282,   73,  282,   73,
      282,   73,   73,  282,   73,   88,  282,  282,   88,  282,
       88,  282,  282,   88,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   95,
      282,   95,  282,  282,   95,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       82,  282,  282,  282,   82,  282,   82,  282,   82,  282,
      282,   82,  104,  282,  104,  282,  104,  123,  282,  282,
      282,  123,  123,  123,  123,  123,  282,  123,  123,  133,
      133,  133,  282,  133,  144,  282,  144,  282,  144,  282,

      144,  282,  282,  144,  153,  282,  153,  282,  153,  282,
      153,  282,  282,  153,  156,  156,  156,  156,  156,  173,
      282,  173,  173,    5,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282
    } ;

static yyconst flex_int16_t yy_chk[1288] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    4,    4,    7,    8,    8,
        7,    9,    9,   11,   15,   18,   19,   23,   19,   30,
       36,   19,   19,   19,   19,   27,   23,   27,   36,    3,
       51,    4,  310,   34,   34,   19,   34,   43,   15,   54,

       43,   11,   18,  309,   32,  125,   30,   97,   34,   54,
       40,   40,  125,   34,   51,   32,   34,   97,   32,   32,
       32,   32,   19,   19,   21,   21,   45,   21,   21,   47,
       21,   21,   21,   21,   21,   32,   40,   41,   41,   21,
       34,   44,   44,   38,   21,   38,   53,   21,   38,   38,
       38,   38,   90,   90,   45,  151,   94,   47,   55,   58,
       58,   58,   58,   41,   59,   96,   59,   59,   86,   87,
       53,   21,   21,   24,   24,  151,   24,   24,   90,   24,
       24,   24,   24,   24,   94,   55,   86,   87,   24,   96,
       38,   59,   60,   24,   60,  308,   24,   60,   60,   60,

       60,   24,   64,   64,   64,   64,  307,  192,   24,   98,
       63,   59,   63,   63,   24,   63,   63,   63,   63,   98,
       24,   31,   31,  280,   31,   31,  126,   31,   31,   31,
       31,   31,   69,  126,  273,   69,   31,   63,  256,   60,
      123,   31,  233,   65,   31,   65,   65,   65,   65,  192,
       69,   69,   69,   69,   91,   91,   99,   63,  123,   71,
      232,   71,   71,   71,   71,   99,   99,   65,   31,   35,
       35,   72,   35,   35,  205,   35,   35,   35,   35,   35,
       91,  130,   72,   71,   35,   72,   72,   72,   72,   35,
       71,  130,   35,   35,   73,   73,   71,   73,   74,  193,

       74,  186,   72,   74,   74,   74,   74,   78,  184,   73,
       78,  174,  117,  133,   73,  117,   35,   61,   61,  133,
       61,   61,  139,   61,   61,   61,   61,   61,  139,  193,
      194,   83,   61,   83,   83,   83,   83,   61,  173,  169,
       61,   73,  140,   85,   85,   74,   85,  152,  140,   83,
      194,  149,   78,  103,  103,  103,  103,  117,   85,  139,
      146,   85,  148,   85,   61,   61,   70,   70,  148,   70,
       70,  156,   70,   70,   70,   70,   70,  156,  145,  200,
       89,   70,   89,   89,   89,   89,   70,  143,  121,   70,
       85,  195,  120,  100,   70,  100,  100,  100,  100,  200,

      101,   70,  163,  101,   89,  162,  118,   70,  163,  100,
      165,  162,  165,   70,   84,  104,  167,  100,  101,  101,
      101,  101,  167,  196,  195,   84,   84,   92,   84,   84,
       84,   84,   84,  102,  105,  102,  100,  105,  102,  102,
      102,  102,  162,  196,   84,   84,  107,  107,  107,  107,
       88,  196,  105,  105,  105,  105,  106,  165,  106,   82,
      187,  106,  106,  106,  106,  110,  187,  110,  110,  110,
      110,  111,  111,  111,  111,   81,  112,  112,  112,  112,
      102,  113,  197,  113,  113,  113,  113,   75,  199,  110,
      112,  114,  114,  114,  114,  221,  110,  115,  115,  115,

      115,  221,  110,  106,   66,  113,  122,  122,  122,  122,
      124,  124,  303,  124,  303,  197,  199,  112,  128,  128,
      128,  128,  166,  199,  166,  124,  129,  221,  129,  124,
      124,  129,  129,  129,  129,   49,  131,  131,  131,  131,
      132,  132,  132,  132,  134,   42,  134,  134,  134,  134,
      136,  136,  136,  136,  132,   29,   28,  124,  131,  135,
      198,  135,  135,  135,  135,  213,   22,   16,  134,  166,
       13,  213,  137,  129,  137,  137,  137,  137,  137,    5,
      198,  132,  138,  135,  138,  138,  211,  138,  138,  138,
      138,  138,  211,  198,    0,  141,  137,  141,  141,  141,

      141,  213,    0,  137,  142,  142,  142,  142,  147,  137,
      147,  147,  147,  147,  211,  150,  150,    0,  150,  154,
      154,  154,  154,  157,  157,  157,  157,    0,  210,  138,
      150,  155,  150,  155,  210,  150,  155,  155,  155,  155,
      158,  154,  158,  158,  158,  158,  158,  159,    0,  159,
      159,  159,  159,  160,  160,  160,  160,  164,  164,  164,
      164,  210,  150,  168,  158,    0,  168,  170,  170,  170,
      170,  159,  175,  175,  212,  175,    0,    0,  155,  215,
      212,  168,  168,  168,  168,  215,    0,  175,  177,  177,
      177,  177,  175,    0,  212,  175,  178,  178,  178,  178,

      180,  180,  180,  180,  181,  238,  181,  181,  181,  181,
      182,  238,  182,  182,  182,  182,  215,    0,  190,  175,
      176,    0,  176,  214,  176,  176,  216,  176,  181,  214,
      176,  176,  216,  191,  176,  238,  176,  176,  176,  183,
      190,  183,  183,  183,  183,  185,  185,  185,  185,  189,
      189,  214,  189,  219,  191,  190,  190,  191,    0,  219,
      216,  185,  220,    0,  189,    0,  191,    0,  220,  189,
        0,  201,  189,  201,  201,  201,  201,  201,  202,  219,
      202,  202,  202,  202,  203,  203,  203,  203,  204,    0,
      204,  204,  204,  204,    0,  201,  189,  209,  209,  217,

      209,  218,  202,  223,  220,  217,    0,  218,  222,  223,
      225,    0,  209,  224,  222,  226,  225,  209,  227,  224,
        0,  226,    0,  228,  227,  228,  228,  228,  228,  228,
      234,    0,  217,    0,  237,  223,  234,  235,  218,  236,
      237,    0,  225,  235,  209,  236,    0,  228,    0,  222,
      227,  226,  224,  229,  229,  229,  229,  230,  230,  230,
      230,  230,  231,  231,  231,  231,  231,  234,  239,  235,
      240,  236,  237,  241,  239,  242,  240,    0,    0,  241,
      243,  242,  244,  243,  243,  245,  243,  246,  244,    0,
      247,  245,  248,  246,  249,  239,  247,  250,  248,  251,

      249,    0,    0,  250,    0,  251,  241,  252,  252,  252,
      252,    0,  261,  247,  253,  253,  253,  253,  261,  258,
        0,  249,    0,    0,  248,  258,  251,  254,  254,  254,
      254,  272,  272,  272,  272,  250,  255,  255,  255,  255,
      255,  259,  260,  262,  263,  264,  258,  259,  260,  262,
      263,  264,  265,  266,  265,  267,  268,  269,  265,  266,
      270,  267,  268,  269,  271,  274,  270,  275,  259,  260,
      271,  274,  276,  275,  277,    0,  278,  279,  276,  268,
      277,  264,  278,  279,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  284,

      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  285,    0,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  286,
        0,    0,    0,    0,  286,    0,  286,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  288,    0,  288,    0,  288,    0,  288,  288,
        0,  288,  289,    0,  289,  289,  289,  289,  289,  289,
        0,  289,  289,  290,    0,  290,  290,  290,  290,  290,
      290,    0,  290,  291,    0,  291,  291,  291,  291,  291,
      291,    0,  291,  292,    0,    0,    0,  292,    0,  292,

        0,  292,    0,    0,  292,  293,    0,  293,    0,  293,
        0,  293,  293,    0,  293,  294,    0,    0,  294,    0,
      294,    0,    0,  294,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  296,
        0,  296,    0,    0,  296,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      298,    0,    0,    0,  298,    0,  298,    0,  298,    0,
        0,  298,  299,    0,  299,    0,  299,  300,    0,    0,
        0,  300,  300,  300,  300,  300,    0,  300,  300,  301,
      301,  301,    0,  301,  302,    0,  302,    0,  302,    0,

      302,    0,    0,  302,  304,    0,  304,    0,  304,    0,
      304,    0,    0,  304,  305,  305,  305,  305,  305,  306,
        0,  306,  306,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[86] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "inscorev2.l"
#line 9 "inscorev2.l"
/*

  INScore Project

  Copyright (C) 2019  Grame

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

  Grame - Centre national de création musicale, 
  11 cours de Verdun Gensoul, 69002 Lyon - France

*/

#ifdef WIN32
#pragma warning (disable : 4267 4100 4244)
#endif

#include <iostream>
#include <fstream>
#include <string>

#include "IParser2.h"
#include "inscoreparse.hpp"

#define YY_NO_UNISTD_H
#define YY_NO_INPUT
#define YY_EXTRA_TYPE inscore2::IParser*
#define YY_USER_ACTION  yyextra->fLine = yylloc->last_line = yylineno; yyextra->fColumn = yylloc->first_column += strlen(yytext);

#define register		// to get rid of the -Wdeprecated-register

// ----------------------------------------------------------------------------------------
// debug utility
#define LDEBUG	0
#if LDEBUG
static  void ldebug (const char * str, std::string context) {
	std::cerr << "LEX " << str << " : " << context << std::endl;
}
#else 
#define ldebug(a, b)
#endif
static  void localdebug (const char * str, std::string context) {
	std::cout << "LEX " << str << " : " << context << std::endl;
}

// ----------------------------------------------------------------------------------------
#define YY_INPUT(buf,result,max_size)   \
   {                                       \
	  char c;                              \
      yyextra->fStream->get( c );                 \
	  if (yyextra->fStream->eof())               \
         result = YY_NULL;                 \
      else {                               \
         buf[0] = c;                       \
         result = 1;                       \
      }                                    \
   }

// ----------------------------------------------------------------------------------------
// strip escape char '\' from escaped characters
static  char* unescape (char * str) {
	int n = strlen(str);
	// browse the string:  'r' is an index to the current read location
	//                     'w' is an index to the current write location
	for (int r=0, w=0; r <= n; r++) {		
		if (str[r] == '\\') {			// escape char '\' is found
			char next = str[r+1];
			if ((next != '\'') && (next != '"')) 	// escape only ' and "
				str[w++] = str[r];		// output the escape char 
		}
		else str[w++] = str[r];			// no escape: put the current char at write location 
	}
	return str;
}

// ----------------------------------------------------------------------------------------
// strip escape char '\' from escaped characters
static  char* unquote (char * str) {
	int n = strlen(str);
	str[n-1] = 0;
	return &str[1];
}

// ----------------------------------------------------------------------------------------


/* allowed character set for first identifier char */
/* allowed character set for first variable char */
/* allowed character set for first identifier char */
/* allowed character set for host names
see RFC952 and RFC1123
*/
/* allowed character for filename and path as defined for windows 7 with some specification for INScore compatibility: no = ; */
/* regular expression characters
as defined by the OSC specification */
#line 945 "inscorelex.cpp"

#define INITIAL 0
#define JSECTION 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int INSCOREV2lex_init (yyscan_t* scanner);

int INSCOREV2lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int INSCOREV2lex_destroy (yyscan_t yyscanner );

int INSCOREV2get_debug (yyscan_t yyscanner );

void INSCOREV2set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE INSCOREV2get_extra (yyscan_t yyscanner );

void INSCOREV2set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *INSCOREV2get_in (yyscan_t yyscanner );

void INSCOREV2set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *INSCOREV2get_out (yyscan_t yyscanner );

void INSCOREV2set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t INSCOREV2get_leng (yyscan_t yyscanner );

char *INSCOREV2get_text (yyscan_t yyscanner );

int INSCOREV2get_lineno (yyscan_t yyscanner );

void INSCOREV2set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * INSCOREV2get_lval (yyscan_t yyscanner );

void INSCOREV2set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *INSCOREV2get_lloc (yyscan_t yyscanner );
    
        void INSCOREV2set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int INSCOREV2wrap (yyscan_t yyscanner );
#else
extern int INSCOREV2wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int INSCOREV2lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int INSCOREV2lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 137 "inscorev2.l"


 /* ----------------------------------------- */
 /*	digits */
 /* ----------------------------------------- */
#line 1191 "inscorelex.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			INSCOREV2ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				INSCOREV2_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		INSCOREV2_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 283 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 282 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 142 "inscorev2.l"
yyextra->fText = yytext; return INT;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 143 "inscorev2.l"
yyextra->fText = yytext; return INT;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 144 "inscorev2.l"
yyextra->fText = yytext; return INT;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 146 "inscorev2.l"
yyextra->fText = yytext; return FLOAT;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 147 "inscorev2.l"
yyextra->fText = yytext; return FLOAT;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 148 "inscorev2.l"
yyextra->fText = yytext; return FLOAT;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 149 "inscorev2.l"
yyextra->fText = yytext; return FLOAT;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 151 "inscorev2.l"
return ENDSCRIPT;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 152 "inscorev2.l"
return WITH;
	YY_BREAK
/* ----------------------------------------- */
/*    delays */
/* ----------------------------------------- */
case 10:
YY_RULE_SETUP
#line 157 "inscorev2.l"
yyextra->fText = yytext; return STIME;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 158 "inscorev2.l"
yyextra->fText = yytext; return MSTIME;
	YY_BREAK
/* ----------------------------------------- */
/*    math operators */
/* ----------------------------------------- */
case 12:
YY_RULE_SETUP
#line 164 "inscorev2.l"
return ADD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 165 "inscorev2.l"
return SUB;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 166 "inscorev2.l"
return DIV;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 167 "inscorev2.l"
return MULT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 168 "inscorev2.l"
return MODULO;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 169 "inscorev2.l"
return QUEST;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 170 "inscorev2.l"
return NEG;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 171 "inscorev2.l"
return EQ;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 172 "inscorev2.l"
return GREATER;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 173 "inscorev2.l"
return GREATEREQ;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 174 "inscorev2.l"
return LESS;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 175 "inscorev2.l"
return LESSEQ;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 176 "inscorev2.l"
return MIN;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 177 "inscorev2.l"
return MAX;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 178 "inscorev2.l"
return HAS;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 180 "inscorev2.l"
return EQUAL;
	YY_BREAK
/* ----------------------------------------- */
/*	math functions */
/* ----------------------------------------- */
case 28:
YY_RULE_SETUP
#line 185 "inscorev2.l"
return COS;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 186 "inscorev2.l"
return SIN;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 187 "inscorev2.l"
return TAN;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 188 "inscorev2.l"
return ACOS;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 189 "inscorev2.l"
return ASIN;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 190 "inscorev2.l"
return ATAN;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 191 "inscorev2.l"
return COSH;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 192 "inscorev2.l"
return SINH;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 193 "inscorev2.l"
return TANH;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 194 "inscorev2.l"
return ACOSH;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 195 "inscorev2.l"
return ASINH;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 196 "inscorev2.l"
return ATANH;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 198 "inscorev2.l"
return EXP;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 199 "inscorev2.l"
return LOG;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 200 "inscorev2.l"
return LOG10;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 201 "inscorev2.l"
return LOG2;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 202 "inscorev2.l"
return POW;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 203 "inscorev2.l"
return SQRT;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 204 "inscorev2.l"
return CBRT;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 206 "inscorev2.l"
return CEIL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 207 "inscorev2.l"
return FLOOR;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 208 "inscorev2.l"
return ROUND;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 210 "inscorev2.l"
return RAND;
	YY_BREAK
/* ----------------------------------------- */
/*	delimiters */
/* ----------------------------------------- */
case 51:
YY_RULE_SETUP
#line 216 "inscorev2.l"
return SLASH;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 217 "inscorev2.l"
return LEFTPAR;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 218 "inscorev2.l"
return RIGHTPAR;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 219 "inscorev2.l"
return LEFTBRACE;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 220 "inscorev2.l"
return RIGHTBRACE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 221 "inscorev2.l"
return LEFTBRACKET;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 222 "inscorev2.l"
return RIGHTBRACKET;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 223 "inscorev2.l"
return ENDSTATEMENT;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 224 "inscorev2.l"
return COLON;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 225 "inscorev2.l"
return COMMA;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 226 "inscorev2.l"
return LDOTS;
	YY_BREAK
/* ----------------------------------------- */
/*	comments */
/* ----------------------------------------- */
case 62:
YY_RULE_SETUP
#line 232 "inscorev2.l"
;
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 233 "inscorev2.l"
;
	YY_BREAK
/* ----------------------------------------- */
/*	identifiers, strings  */
/* ----------------------------------------- */
case 64:
YY_RULE_SETUP
#line 239 "inscorev2.l"
yyextra->fText = yytext; return LETTERS;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 240 "inscorev2.l"
yyextra->fText = yytext; return IDENTIFIER;
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 241 "inscorev2.l"
yyextra->fText = unescape(unquote(yytext)); return STRING;
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 242 "inscorev2.l"
yyextra->fText = unescape(unquote(yytext)); return STRING;
	YY_BREAK
/* ----------------------------------------- */
/*	variables */
/* ----------------------------------------- */
case 68:
YY_RULE_SETUP
#line 247 "inscorev2.l"
yyextra->fText = &yytext[1]; return VARIABLE;
	YY_BREAK
/* ----------------------------------------- */
/*	regular expressions */
/* ----------------------------------------- */
case 69:
YY_RULE_SETUP
#line 253 "inscorev2.l"
yyextra->fText = yytext; return REGEXP;	
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 254 "inscorev2.l"
yyextra->fText = yytext; return REGEXP;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 255 "inscorev2.l"
yyextra->fText = yytext; return REGEXP;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 256 "inscorev2.l"
yyextra->fText = yytext; return ANYADDR;
	YY_BREAK
/* ----------------------------------------- */
/*	expanded identifiers */
/* ----------------------------------------- */
case 73:
YY_RULE_SETUP
#line 261 "inscorev2.l"
yyextra->fText = yytext; return EXPANDID;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 262 "inscorev2.l"
yyextra->fText = yytext; return EXPANDID;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 263 "inscorev2.l"
yyextra->fText = yytext; return EXPANDID;
	YY_BREAK
/* ----------------------------------------- */
/*	javascript section */
/* ----------------------------------------- */
case 76:
YY_RULE_SETUP
#line 268 "inscorev2.l"
BEGIN JSECTION;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 269 "inscorev2.l"
BEGIN INITIAL;
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 270 "inscorev2.l"
yyextra->fText = unescape(yytext); return JSCRIPT;
	YY_BREAK
/* ----------------------------------------- */
/*	hostname and IP */
/* ----------------------------------------- */
case 79:
YY_RULE_SETUP
#line 275 "inscorev2.l"
yyextra->fText = yytext; return URLPREFIX;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 276 "inscorev2.l"
yyextra->fText = yytext; return URLPREFIX;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 277 "inscorev2.l"
yyextra->fText = yytext; return URLPREFIX;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 280 "inscorev2.l"
;   /* eat up space */
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 281 "inscorev2.l"
{ yyextra->fColumn = yylloc->first_column = 1; } 	/* return EOL;  eat up end of line */
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(JSECTION):
#line 283 "inscorev2.l"
return ENDSCRIPT;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 285 "inscorev2.l"
yyextra->fText = yytext; ldebug("ERR", yyextra->fText); return ERR;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 287 "inscorev2.l"
ECHO;
	YY_BREAK
#line 1754 "inscorelex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * INSCOREV2lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( INSCOREV2wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of INSCOREV2lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					INSCOREV2realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			INSCOREV2restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) INSCOREV2realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 283 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 283 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 282);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					INSCOREV2restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( INSCOREV2wrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void INSCOREV2restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        INSCOREV2ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            INSCOREV2_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	INSCOREV2_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	INSCOREV2_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void INSCOREV2_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		INSCOREV2pop_buffer_state();
	 *		INSCOREV2push_buffer_state(new_buffer);
     */
	INSCOREV2ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	INSCOREV2_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (INSCOREV2wrap()) processing, but the only time this flag
	 * is looked at is after INSCOREV2wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void INSCOREV2_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE INSCOREV2_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) INSCOREV2alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in INSCOREV2_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) INSCOREV2alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in INSCOREV2_create_buffer()" );

	b->yy_is_our_buffer = 1;

	INSCOREV2_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with INSCOREV2_create_buffer()
 * @param yyscanner The scanner object.
 */
    void INSCOREV2_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		INSCOREV2free((void *) b->yy_ch_buf ,yyscanner );

	INSCOREV2free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a INSCOREV2restart() or at EOF.
 */
    static void INSCOREV2_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	INSCOREV2_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then INSCOREV2_init_buffer was _probably_
     * called from INSCOREV2restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void INSCOREV2_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		INSCOREV2_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void INSCOREV2push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	INSCOREV2ensure_buffer_stack(yyscanner);

	/* This block is copied from INSCOREV2_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from INSCOREV2_switch_to_buffer. */
	INSCOREV2_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void INSCOREV2pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	INSCOREV2_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		INSCOREV2_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void INSCOREV2ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)INSCOREV2alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in INSCOREV2ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)INSCOREV2realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in INSCOREV2ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE INSCOREV2_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) INSCOREV2alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in INSCOREV2_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	INSCOREV2_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to INSCOREV2lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       INSCOREV2_scan_bytes() instead.
 */
YY_BUFFER_STATE INSCOREV2_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return INSCOREV2_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to INSCOREV2lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE INSCOREV2_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) INSCOREV2alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in INSCOREV2_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = INSCOREV2_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in INSCOREV2_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE INSCOREV2get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int INSCOREV2get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int INSCOREV2get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *INSCOREV2get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *INSCOREV2get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t INSCOREV2get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *INSCOREV2get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void INSCOREV2set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void INSCOREV2set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "INSCOREV2set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void INSCOREV2set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "INSCOREV2set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see INSCOREV2_switch_to_buffer
 */
void INSCOREV2set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void INSCOREV2set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int INSCOREV2get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void INSCOREV2set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * INSCOREV2get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void INSCOREV2set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *INSCOREV2get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void INSCOREV2set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* INSCOREV2lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int INSCOREV2lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) INSCOREV2alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* INSCOREV2lex_init_extra has the same functionality as INSCOREV2lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to INSCOREV2alloc in
 * the yyextra field.
 */

int INSCOREV2lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    INSCOREV2set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) INSCOREV2alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    INSCOREV2set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from INSCOREV2lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * INSCOREV2lex_init()
     */
    return 0;
}

/* INSCOREV2lex_destroy is for both reentrant and non-reentrant scanners. */
int INSCOREV2lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		INSCOREV2_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		INSCOREV2pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	INSCOREV2free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        INSCOREV2free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * INSCOREV2lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    INSCOREV2free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *INSCOREV2alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *INSCOREV2realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void INSCOREV2free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see INSCOREV2realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 287 "inscorev2.l"



namespace inscore2
{

void IParser::initScanner()
{
	INSCOREV2lex_init(&fScanner);
	INSCOREV2set_extra(this,fScanner);
}

void IParser::destroyScanner()
{
	INSCOREV2lex_destroy(fScanner);
}

} // end namespace


