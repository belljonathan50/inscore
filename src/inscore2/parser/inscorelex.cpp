#line 1 "inscorelex.cpp"

#line 3 "inscorelex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define INSCOREV2_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer INSCOREV2_create_buffer
#endif

#ifdef yy_delete_buffer
#define INSCOREV2_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer INSCOREV2_delete_buffer
#endif

#ifdef yy_scan_buffer
#define INSCOREV2_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer INSCOREV2_scan_buffer
#endif

#ifdef yy_scan_string
#define INSCOREV2_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string INSCOREV2_scan_string
#endif

#ifdef yy_scan_bytes
#define INSCOREV2_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes INSCOREV2_scan_bytes
#endif

#ifdef yy_init_buffer
#define INSCOREV2_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer INSCOREV2_init_buffer
#endif

#ifdef yy_flush_buffer
#define INSCOREV2_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer INSCOREV2_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define INSCOREV2_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state INSCOREV2_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define INSCOREV2_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer INSCOREV2_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define INSCOREV2push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state INSCOREV2push_buffer_state
#endif

#ifdef yypop_buffer_state
#define INSCOREV2pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state INSCOREV2pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define INSCOREV2ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack INSCOREV2ensure_buffer_stack
#endif

#ifdef yylex
#define INSCOREV2lex_ALREADY_DEFINED
#else
#define yylex INSCOREV2lex
#endif

#ifdef yyrestart
#define INSCOREV2restart_ALREADY_DEFINED
#else
#define yyrestart INSCOREV2restart
#endif

#ifdef yylex_init
#define INSCOREV2lex_init_ALREADY_DEFINED
#else
#define yylex_init INSCOREV2lex_init
#endif

#ifdef yylex_init_extra
#define INSCOREV2lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra INSCOREV2lex_init_extra
#endif

#ifdef yylex_destroy
#define INSCOREV2lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy INSCOREV2lex_destroy
#endif

#ifdef yyget_debug
#define INSCOREV2get_debug_ALREADY_DEFINED
#else
#define yyget_debug INSCOREV2get_debug
#endif

#ifdef yyset_debug
#define INSCOREV2set_debug_ALREADY_DEFINED
#else
#define yyset_debug INSCOREV2set_debug
#endif

#ifdef yyget_extra
#define INSCOREV2get_extra_ALREADY_DEFINED
#else
#define yyget_extra INSCOREV2get_extra
#endif

#ifdef yyset_extra
#define INSCOREV2set_extra_ALREADY_DEFINED
#else
#define yyset_extra INSCOREV2set_extra
#endif

#ifdef yyget_in
#define INSCOREV2get_in_ALREADY_DEFINED
#else
#define yyget_in INSCOREV2get_in
#endif

#ifdef yyset_in
#define INSCOREV2set_in_ALREADY_DEFINED
#else
#define yyset_in INSCOREV2set_in
#endif

#ifdef yyget_out
#define INSCOREV2get_out_ALREADY_DEFINED
#else
#define yyget_out INSCOREV2get_out
#endif

#ifdef yyset_out
#define INSCOREV2set_out_ALREADY_DEFINED
#else
#define yyset_out INSCOREV2set_out
#endif

#ifdef yyget_leng
#define INSCOREV2get_leng_ALREADY_DEFINED
#else
#define yyget_leng INSCOREV2get_leng
#endif

#ifdef yyget_text
#define INSCOREV2get_text_ALREADY_DEFINED
#else
#define yyget_text INSCOREV2get_text
#endif

#ifdef yyget_lineno
#define INSCOREV2get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno INSCOREV2get_lineno
#endif

#ifdef yyset_lineno
#define INSCOREV2set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno INSCOREV2set_lineno
#endif

#ifdef yyget_column
#define INSCOREV2get_column_ALREADY_DEFINED
#else
#define yyget_column INSCOREV2get_column
#endif

#ifdef yyset_column
#define INSCOREV2set_column_ALREADY_DEFINED
#else
#define yyset_column INSCOREV2set_column
#endif

#ifdef yywrap
#define INSCOREV2wrap_ALREADY_DEFINED
#else
#define yywrap INSCOREV2wrap
#endif

#ifdef yyget_lval
#define INSCOREV2get_lval_ALREADY_DEFINED
#else
#define yyget_lval INSCOREV2get_lval
#endif

#ifdef yyset_lval
#define INSCOREV2set_lval_ALREADY_DEFINED
#else
#define yyset_lval INSCOREV2set_lval
#endif

#ifdef yyget_lloc
#define INSCOREV2get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc INSCOREV2get_lloc
#endif

#ifdef yyset_lloc
#define INSCOREV2set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc INSCOREV2set_lloc
#endif

#ifdef yyalloc
#define INSCOREV2alloc_ALREADY_DEFINED
#else
#define yyalloc INSCOREV2alloc
#endif

#ifdef yyrealloc
#define INSCOREV2realloc_ALREADY_DEFINED
#else
#define yyrealloc INSCOREV2realloc
#endif

#ifdef yyfree
#define INSCOREV2free_ALREADY_DEFINED
#else
#define yyfree INSCOREV2free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define INSCOREV2wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 83
#define YY_END_OF_BUFFER 84
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[267] =
    {   0,
        0,    0,   76,   76,   84,   82,   80,   81,   81,   16,
       82,   60,   82,   14,   82,   50,   51,   13,   10,   58,
       11,   82,   49,    1,   57,   56,   20,   25,   18,   15,
       62,   54,   55,   63,   62,   62,   52,   82,   53,   76,
       76,   83,   80,   81,    0,   64,    0,   60,    0,   66,
        0,   65,    0,    0,   67,    0,    0,   67,    2,    0,
       67,    0,    3,    0,   67,    0,   12,   70,    5,    1,
       63,    0,   63,   63,   21,    0,   17,   19,   62,    0,
        0,    0,   63,   62,   62,    0,    0,   76,   76,    0,
       75,   64,   66,   65,    0,    0,    0,   67,    5,   67,

       67,    0,    5,   67,   77,   59,    4,    5,    1,   67,
       67,    7,    0,    0,    0,   68,    0,    0,    0,    0,
       63,   62,   62,   69,    0,    0,   61,    5,    7,    0,
        5,    7,    0,    5,    0,    1,    7,    0,   68,    0,
        0,    0,    0,    0,   63,   62,    9,   69,    0,    0,
        0,    0,    5,    0,    5,    0,    0,    0,    6,    0,
        0,    0,    0,    0,    0,   63,    0,    6,   78,    5,
        0,    0,    0,    0,    0,    0,    0,   63,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   71,   72,    0,    8,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   26,   38,    0,   24,   39,   23,   22,
       42,    0,    0,   27,    0,   28,    0,    0,   79,    0,
       73,   29,   30,   31,   44,   45,   32,    0,    0,   41,
       48,    0,   33,   43,   34,   78,    0,   35,   36,   37,
       46,   40,   47,    0,   74,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,    1,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   23,   23,   23,   23,   23,   23,   24,   25,   26,
       27,   28,   29,    1,   30,   30,   30,   31,   32,   30,
       30,   30,   30,   30,   30,   30,   30,   33,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       34,   35,   36,    1,   37,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   47,   30,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       30,   30,   61,   62,   63,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[64] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    4,    1,
        1,    1,    1,    5,    5,    6,    7,    8,    1,    9,
        9,    9,    9,   10,    1,    1,    1,    1,    5,   11,
       11,   11,   11,   12,    1,   13,   14,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       12,   15,    1
    } ;

static const flex_int16_t yy_base[295] =
    {   0,
        0,    0,   61,   63,  608, 1150,   66,   66,   69, 1150,
       67,    0,  592, 1150,   64,  585, 1150,   42,   62, 1150,
      111,  580,   73,  160, 1150, 1150,   59,  560,  553,   46,
      208,   99, 1150,   80,  256,   43,    0,  129, 1150,  108,
      135,  535,   96,  139,  120, 1150,  123,    0,  535,    0,
       80, 1150,  136,   96,  125,    0,    0,  140,  150,  178,
      304,    0,  193,  183,  226,  524, 1150, 1150,  231,  353,
      239,  266,  281,  330, 1150,  261, 1150, 1150,  495,  496,
      284,  409,  364,  131,  132,  466,  314,  150,  214,  480,
     1150,  150,    0,  155,  104,  205,  278,  379,  338,  388,

      291,  489,  414,  432,  363, 1150, 1150,  421,  436,  444,
      450,  282,  454,  262,  462,    0,  479,  478,  459,  202,
      469,   68,  189,    0,  467,  489,  261,  493,  497,  232,
      503,  518,  526,  532,  544,  555,  549,  404,    0,  430,
      402,  561,  305,  394,  571,  138,  369,    0,  569,  592,
      331,  573,  598,  604,  608,    0,  613,  389,  407,  353,
      617,    0,    0,  362,  346,  627,  651,  625,  629,  637,
      645,  653,  307,  661,  318,  339,    0,  687,  672,  669,
      240,  283,  351,  410,  680,  442,  691,  481,  400,  712,
      370,  306, 1150, 1150,    0,  723,  477,  668,  519,  599,

      695,  467,  699,  707,  721,  725,  726,  729,  736,  737,
      586,  738,  661,  741,  750,  760,  285,  294,  772,  774,
      775,  654,  782,  783,  399,  784,  579,  791,  645,  779,
      786,  793,  796,  798,  805,  808,  813,  818,  827,  270,
     1150,  818,  827,  834,  836,  838,  841,  846,  849,  850,
      853,  857,  858,  860,  862,  867,  232,  867,  875,  877,
      878,  879,  886,  168, 1150, 1150,  910,  925,  940,  952,
      963,  974,  984,  995, 1005, 1017, 1027, 1036, 1050, 1057,
     1071, 1084, 1092, 1101, 1109, 1116,  230, 1126, 1134, 1138,
      196,  185,   93,   82

    } ;

static const flex_int16_t yy_def[295] =
    {   0,
      266,    1,  267,  267,  266,  266,  266,  266,  266,  266,
      268,  269,  270,  266,  271,  266,  266,  272,  272,  266,
      273,  266,  266,  274,  266,  266,  266,  266,  266,  272,
      275,  276,  266,  277,  275,   35,  278,  266,  266,  279,
      279,  279,  266,  266,  268,  266,  268,  269,  270,  280,
      271,  266,  271,  281,  272,  282,  278,   19,   19,  266,
      273,  283,   61,  266,   63,  266,  266,  266,  283,  274,
       70,  276,  277,   70,  266,  266,  266,  266,   35,  282,
      282,  284,  277,   35,   35,  278,  266,  279,  279,  279,
      266,  268,  280,  271,  281,  281,  281,  272,  266,   19,

       63,  285,  283,   61,  266,  266,  266,  285,   70,  272,
       63,   74,  266,  266,  266,  286,  266,  266,  287,  282,
      277,   35,   35,  288,  266,  266,  281,  266,  272,  289,
      285,   63,  283,  289,  289,   70,  266,  266,  286,  266,
      266,  266,  290,  266,  277,   35,   35,  288,  266,  266,
      289,  266,  134,  285,  134,  135,  266,  135,  135,  266,
      266,  291,  292,  266,  266,  277,  283,  266,  266,  134,
      283,  134,  266,  266,  266,  290,  293,  277,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      289,  266,  266,  266,  294,  277,  289,  289,  289,  289,

      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  266,  266,  266,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  266,  266,  266,
      266,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  266,  266,  289,  289,  289,
      289,  289,  289,  266,  266,    0,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266

    } ;

static const flex_int16_t yy_nxt[1214] =
    {   0,
        6,    7,    8,    9,    7,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       24,   24,   24,   25,   26,   27,   28,   29,   30,   31,
       31,   31,   31,   32,    6,   33,   34,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   35,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   36,   31,
       37,   38,   39,   41,   41,   41,   41,   43,   44,   44,
       43,   44,   44,   46,   52,   56,   58,   67,   58,   56,
       79,   59,   59,   59,   59,   75,   68,   76,   85,   42,
       52,   42,  218,   55,   55,   56,   55,   43,   53,   96,

       43,   47,   57,  195,   80,   79,   57,   96,   55,   97,
       89,   89,  146,   72,   53,   80,   83,   97,   81,   81,
       81,   81,   57,   60,   55,   58,   46,   61,   62,   92,
       63,   63,   63,   63,   64,   80,   90,   89,   89,   55,
       57,   44,   44,   60,   56,   60,   94,   55,   87,   87,
       87,   87,   89,   89,   47,  167,   46,   47,   56,   98,
       98,   98,   98,   90,   55,   52,   55,   99,   79,   79,
       53,   57,   60,   55,   55,   79,   65,   69,   90,   70,
       70,   70,   70,   64,   47,   57,  122,  123,   55,   53,
       60,  100,   60,   72,   60,  176,   73,   87,   87,   87,

       87,   74,  105,  105,  105,  105,  175,   55,   96,   65,
      103,  266,   63,   63,   63,   63,   89,   89,   97,  144,
       57,   55,   55,  265,   65,   62,   79,   71,   71,   71,
       71,   64,  107,  147,  104,  107,   55,  116,  143,   60,
      143,   72,   90,   62,   73,   65,   65,   65,   65,   62,
      108,  108,  108,  108,  266,  152,   62,   62,   71,   71,
       71,   71,  114,  114,   96,  114,  114,   65,   57,   55,
       55,   80,   65,   62,   97,   71,   71,   71,   71,   64,
       71,   96,   80,  264,   55,   81,   81,   81,   81,   72,
      127,   97,   73,   84,   55,   55,   55,   55,   65,  203,

       62,  117,   80,   81,   81,   81,   81,  115,  115,   55,
      101,  101,  101,  101,   72,  257,   57,   55,   58,  116,
       61,   62,  118,  101,  101,  101,  101,   64,  163,  241,
      204,  125,   55,   87,   87,   87,   87,   56,  240,  107,
       55,   57,  107,  266,  110,  217,  111,   62,   62,  112,
      112,  112,  112,  194,  152,  126,  266,  128,  128,  128,
      128,  192,  266,  177,   57,   60,   55,   55,   62,   65,
       69,   71,  109,  109,  109,  109,   64,   55,   55,  144,
       55,   55,  105,  105,  105,  105,   72,  171,  205,   73,
      173,  113,   55,  152,   74,  121,   99,   72,   98,   98,

       98,   98,  110,  266,  110,  151,   79,  129,  129,  129,
      129,  165,   56,   57,   80,  107,   62,   62,  107,  162,
      100,  266,  152,  151,   57,   80,  118,   62,   80,   80,
       80,   80,  119,  131,  131,  131,  131,  214,  133,   57,
      134,  134,  134,  134,  116,   80,  110,  161,  111,  113,
      266,  132,  132,  132,  132,  136,  136,  136,  136,   62,
      206,  160,  135,  129,  129,  129,  129,   62,  266,  132,
      132,  132,  132,  137,  137,  137,  137,   56,  142,  142,
      142,  142,   55,   55,   62,   55,  149,  149,  149,  149,
      152,   65,  209,  113,   62,  141,  140,   55,   62,  138,

      152,  145,   72,  113,   57,  113,   62,  266,  137,  137,
      137,  137,  128,  128,  128,  128,  129,  129,  129,  129,
       62,  224,  153,  153,  153,  153,  212,  219,  124,   57,
       56,  116,   79,  213,  150,   62,   62,  132,  132,  132,
      132,  106,  152,   49,  135,  154,  154,  154,  154,  133,
      113,  155,  155,  155,  155,  152,  221,   57,  157,   65,
      158,   62,   91,  159,  159,  159,  159,  152,  137,  137,
      137,  137,  103,  156,  136,  136,  136,  136,  117,   78,
      142,  142,  142,  142,   55,   55,   77,   55,  149,  149,
      149,  149,  169,  169,  169,  169,   62,   66,   54,   55,

       49,  166,  152,   62,   72,  157,  157,  266,  157,  152,
      150,  168,  168,  168,  168,   62,   62,  170,  170,  170,
      170,  171,  152,  172,  172,  172,  172,  170,  170,  170,
      170,   57,  168,  168,  168,  168,  174,  174,  174,  174,
       55,   55,  233,   55,  168,  168,  168,  168,  169,  169,
      169,  169,  222,  157,   62,   55,  170,  170,  170,  170,
       72,  266,   62,  178,  190,  190,  190,  190,  152,  266,
      171,   62,  191,  191,  191,  191,  266,  152,   62,  266,
      174,  174,  174,  174,  152,   62,   62,   57,  179,   62,
      180,  152,  181,  182,  151,  183,  193,   62,  184,  185,

       55,   55,  186,   55,  187,  188,  189,  200,   62,  245,
      201,  197,   62,  220,  235,   55,   62,  207,  152,  202,
       72,  266,  152,  196,   62,  208,  198,  199,  210,   62,
      152,  215,  215,  215,  215,  216,   55,   55,   62,   55,
      223,  211,   62,   62,  152,  266,   62,   57,  152,  152,
      225,   55,  152,   62,   62,   62,   72,  226,   62,  152,
      152,  152,  266,  266,  152,  266,  266,   62,  228,  237,
      237,  237,  237,  238,  266,  227,  266,  266,  230,  239,
      239,  239,  239,   57,  266,  229,  232,  234,  266,   62,
      236,   62,   62,  266,  231,  152,   62,  152,  152,   62,

       62,   62,  152,   62,  266,  152,  152,  152,   62,  152,
       62,  249,  250,   62,  152,   62,  152,  266,  266,  152,
      266,  152,   62,  243,  244,   62,  242,  247,  152,  246,
       62,  152,  266,  251,  248,   62,  238,  256,  256,  256,
      256,  152,  253,  266,   62,  252,  239,  239,  239,  239,
      152,   62,  255,   62,  266,   62,  266,  152,   62,  152,
      254,  152,  258,   62,  152,  266,   62,   62,  262,  152,
       62,  259,  152,  152,   62,   62,  152,   62,  260,   62,
      152,  152,  266,  152,   62,  152,  256,  256,  256,  256,
      152,  266,   62,  266,   62,   62,   62,  263,  152,  261,

      152,  152,  152,   62,  266,  266,  266,  266,  266,  152,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       48,  266,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   50,  266,  266,  266,  266,
       50,  266,   50,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   55,  266,
       55,  266,   55,  266,   55,   55,  266,   55,   65,  266,
       65,   65,   65,   65,   65,   65,  266,   65,   65,   71,

      266,   71,   71,   71,   71,   71,   71,  266,   71,   79,
      266,   79,   79,   79,   79,   79,   79,  266,   79,   82,
      266,  266,  266,   82,  266,   82,  266,   82,  266,  266,
       82,   73,  266,   73,  266,   73,  266,   73,   73,  266,
       73,   86,  266,  266,   86,  266,   86,  266,  266,   86,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   93,  266,   93,  266,  266,
       93,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   80,  266,  266,  266,
       80,  266,   80,  266,   80,  266,  266,   80,  102,  266,

      102,  266,  102,  120,  266,  266,  266,  120,  120,  120,
      120,  120,  266,  120,  120,  130,  130,  130,  266,  130,
      139,  266,  139,  266,  139,  266,  139,  266,  266,  139,
      148,  266,  148,  266,  148,  266,  148,  266,  266,  148,
      151,  151,  151,  151,  151,  164,  266,  164,  164,    5,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266
    } ;

static const flex_int16_t yy_chk[1214] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    4,    4,    7,    8,    8,
        7,    9,    9,   11,   15,   18,   19,   23,   19,   30,
       36,   19,   19,   19,   19,   27,   23,   27,   36,    3,
       51,    4,  294,   34,   34,   19,   34,   43,   15,   54,

       43,   11,   18,  293,   32,  122,   30,   95,   34,   54,
       40,   40,  122,   34,   51,   32,   34,   95,   32,   32,
       32,   32,   19,   19,   21,   21,   45,   21,   21,   47,
       21,   21,   21,   21,   21,   32,   40,   41,   41,   21,
       34,   44,   44,   38,   21,   38,   53,   21,   38,   38,
       38,   38,   88,   88,   45,  146,   92,   47,   55,   58,
       58,   58,   58,   41,   59,   94,   59,   59,   84,   85,
       53,   21,   21,   24,   24,  146,   24,   24,   88,   24,
       24,   24,   24,   24,   92,   55,   84,   85,   24,   94,
       38,   59,   60,   24,   60,  292,   24,   60,   60,   60,

       60,   24,   64,   64,   64,   64,  291,   63,   96,   63,
       63,   59,   63,   63,   63,   63,   89,   89,   96,  120,
       24,   31,   31,  264,   31,   31,  123,   31,   31,   31,
       31,   31,   69,  123,   63,   69,   31,  120,  287,   60,
      287,   31,   89,   65,   31,   65,   65,   65,   65,  130,
       69,   69,   69,   69,   63,  130,   71,  181,   71,   71,
       71,   71,   76,  114,  127,   76,  114,   65,   31,   35,
       35,   72,   35,   35,  127,   35,   35,   35,   35,   35,
       71,   97,   72,  257,   35,   72,   72,   72,   72,   35,
       97,   97,   35,   35,   73,   73,  112,   73,  112,  181,

      182,   81,   72,   81,   81,   81,   81,   76,  114,   73,
      101,  101,  101,  101,   73,  240,   35,   61,   61,   81,
       61,   61,  143,   61,   61,   61,   61,   61,  143,  218,
      182,   87,   61,   87,   87,   87,   87,   61,  217,   99,
       61,   73,   99,  112,   74,  192,   74,   74,  151,   74,
       74,   74,   74,  175,  151,   87,  176,   99,   99,   99,
       99,  173,  176,  165,   61,   61,   70,   70,  183,   70,
       70,   74,   70,   70,   70,   70,   70,   83,   83,  164,
       83,   70,  105,  105,  105,  105,   70,  191,  183,   70,
      160,   74,   83,  191,   70,   83,   98,   83,   98,   98,

       98,   98,  100,  158,  100,  158,  147,  100,  100,  100,
      100,  144,   98,   70,   82,  103,  225,  189,  103,  141,
       98,  159,  225,  159,   83,   82,   82,  184,   82,   82,
       82,   82,   82,  103,  103,  103,  103,  189,  108,   98,
      108,  108,  108,  108,   82,   82,  104,  140,  104,  100,
      158,  104,  104,  104,  104,  109,  109,  109,  109,  186,
      184,  138,  108,  110,  110,  110,  110,  111,  159,  111,
      111,  111,  111,  113,  113,  113,  113,  110,  119,  119,
      119,  119,  121,  121,  202,  121,  125,  125,  125,  125,
      202,  111,  186,  104,  197,  118,  117,  121,  188,  115,

      197,  121,  121,  126,  110,  126,  102,   90,  126,  126,
      126,  126,  128,  128,  128,  128,  129,  129,  129,  129,
      131,  202,  131,  131,  131,  131,  188,  197,   86,  121,
      129,   80,   79,  188,  128,  132,  199,  132,  132,  132,
      132,   66,  199,   49,  131,  133,  133,  133,  133,  134,
      126,  134,  134,  134,  134,  134,  199,  129,  135,  132,
      135,  135,   42,  135,  135,  135,  135,  135,  137,  137,
      137,  137,  136,  134,  136,  136,  136,  136,  142,   29,
      142,  142,  142,  142,  145,  145,   28,  145,  149,  149,
      149,  149,  152,  152,  152,  152,  227,   22,   16,  145,

       13,  145,  227,  211,  145,  135,  150,    5,  150,  211,
      149,  150,  150,  150,  150,  153,  200,  153,  153,  153,
      153,  154,  200,  154,  154,  154,  154,  155,  155,  155,
      155,  145,  157,  157,  157,  157,  161,  161,  161,  161,
      166,  166,  211,  166,  168,  168,  168,  168,  169,  169,
      169,  169,  200,  150,  170,  166,  170,  170,  170,  170,
      166,    0,  229,  166,  171,  171,  171,  171,  229,    0,
      172,  222,  172,  172,  172,  172,    0,  222,  213,    0,
      174,  174,  174,  174,  213,  198,  180,  166,  167,  179,
      167,  198,  167,  167,  172,  167,  174,  185,  167,  167,

      178,  178,  167,  178,  167,  167,  167,  180,  187,  222,
      180,  179,  201,  198,  213,  178,  203,  185,  201,  180,
      178,    0,  203,  178,  204,  185,  179,  179,  187,  190,
      204,  190,  190,  190,  190,  190,  196,  196,  205,  196,
      201,  187,  206,  207,  205,    0,  208,  178,  206,  207,
      203,  196,  208,  209,  210,  212,  196,  204,  214,  209,
      210,  212,    0,    0,  214,    0,    0,  215,  206,  215,
      215,  215,  215,  215,    0,  205,    0,    0,  208,  216,
      216,  216,  216,  196,    0,  207,  210,  212,    0,  219,
      214,  220,  221,    0,  209,  219,  230,  220,  221,  223,

      224,  226,  230,  231,    0,  223,  224,  226,  228,  231,
      232,  228,  228,  233,  228,  234,  232,    0,    0,  233,
        0,  234,  235,  220,  221,  236,  219,  224,  235,  223,
      237,  236,    0,  232,  226,  242,  237,  238,  238,  238,
      238,  242,  234,    0,  243,  233,  239,  239,  239,  239,
      243,  244,  236,  245,    0,  246,    0,  244,  247,  245,
      235,  246,  242,  248,  247,    0,  249,  250,  249,  248,
      251,  243,  249,  250,  252,  253,  251,  254,  244,  255,
      252,  253,    0,  254,  258,  255,  256,  256,  256,  256,
      258,    0,  259,    0,  260,  261,  262,  252,  259,  248,

      260,  261,  262,  263,    0,    0,    0,    0,    0,  263,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      269,    0,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  270,    0,    0,    0,    0,
      270,    0,  270,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  272,    0,
      272,    0,  272,    0,  272,  272,    0,  272,  273,    0,
      273,  273,  273,  273,  273,  273,    0,  273,  273,  274,

        0,  274,  274,  274,  274,  274,  274,    0,  274,  275,
        0,  275,  275,  275,  275,  275,  275,    0,  275,  276,
        0,    0,    0,  276,    0,  276,    0,  276,    0,    0,
      276,  277,    0,  277,    0,  277,    0,  277,  277,    0,
      277,  278,    0,    0,  278,    0,  278,    0,    0,  278,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  280,    0,  280,    0,    0,
      280,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  282,    0,    0,    0,
      282,    0,  282,    0,  282,    0,    0,  282,  283,    0,

      283,    0,  283,  284,    0,    0,    0,  284,  284,  284,
      284,  284,    0,  284,  284,  285,  285,  285,    0,  285,
      286,    0,  286,    0,  286,    0,  286,    0,    0,  286,
      288,    0,  288,    0,  288,    0,  288,    0,    0,  288,
      289,  289,  289,  289,  289,  290,    0,  290,  290,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[84] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "inscorev2.l"
#line 9 "inscorev2.l"
/*

  INScore Project

  Copyright (C) 2019  Grame

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

  Grame - Centre national de création musicale, 
  11 cours de Verdun Gensoul, 69002 Lyon - France

*/

#ifdef WIN32
#pragma warning (disable : 4267 4100 4244)
#endif

#include <iostream>
#include <fstream>
#include <string>

#include "IParser2.h"
#include "inscoreparse.hpp"

#define YY_NO_UNISTD_H
#define YY_NO_INPUT
#define YY_EXTRA_TYPE inscore2::IParser*
#define YY_USER_ACTION  yyextra->fLine = yylloc->last_line = yylineno; yyextra->fColumn = yylloc->first_column += strlen(yytext);

#define register		// to get rid of the -Wdeprecated-register

// ----------------------------------------------------------------------------------------
// debug utility
#define LDEBUG	0
#if LDEBUG
static  void ldebug (const char * str, std::string context) {
	std::cerr << "LEX " << str << " : " << context << std::endl;
}
#else 
#define ldebug(a, b)
#endif
static  void localdebug (const char * str, std::string context) {
	std::cout << "LEX " << str << " : " << context << std::endl;
}

// ----------------------------------------------------------------------------------------
#define YY_INPUT(buf,result,max_size)   \
   {                                       \
	  char c;                              \
      yyextra->fStream->get( c );                 \
	  if (yyextra->fStream->eof())               \
         result = YY_NULL;                 \
      else {                               \
         buf[0] = c;                       \
         result = 1;                       \
      }                                    \
   }

// ----------------------------------------------------------------------------------------
// strip escape char '\' from escaped characters
static  char* unescape (char * str) {
	int n = strlen(str);
	// browse the string:  'r' is an index to the current read location
	//                     'w' is an index to the current write location
	for (int r=0, w=0; r <= n; r++) {		
		if (str[r] == '\\') {			// escape char '\' is found
			char next = str[r+1];
			if ((next != '\'') && (next != '"')) 	// escape only ' and "
				str[w++] = str[r];		// output the escape char 
		}
		else str[w++] = str[r];			// no escape: put the current char at write location 
	}
	return str;
}

// ----------------------------------------------------------------------------------------
// strip escape char '\' from escaped characters
static  char* unquote (char * str) {
	int n = strlen(str);
	str[n-1] = 0;
	return &str[1];
}

// ----------------------------------------------------------------------------------------

#line 1145 "inscorelex.cpp"

#line 115 "inscorev2.l"
 /* allowed character set for first identifier char */
 /* allowed character set for first variable char */
 /* allowed character set for first identifier char */
 /* allowed character set for host names
	see RFC952 and RFC1123
 */
 /* allowed character for filename and path as defined for windows 7 with some specification for INScore compatibility: no = ; */
 /* regular expression characters
    as defined by the OSC specification */
#line 1157 "inscorelex.cpp"

#define INITIAL 0
#define JSECTION 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 138 "inscorev2.l"


 /* ----------------------------------------- */
 /*	digits */
 /* ----------------------------------------- */
#line 1446 "inscorelex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 267 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 266 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 143 "inscorev2.l"
yyextra->fText = yytext; return UINT;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 144 "inscorev2.l"
yyextra->fText = yytext; return INT;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 145 "inscorev2.l"
yyextra->fText = yytext; return INT;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 147 "inscorev2.l"
yyextra->fText = yytext; return FLOAT;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 148 "inscorev2.l"
yyextra->fText = yytext; return FLOAT;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 149 "inscorev2.l"
yyextra->fText = yytext; return FLOAT;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 150 "inscorev2.l"
yyextra->fText = yytext; return FLOAT;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 152 "inscorev2.l"
return ENDSCRIPT;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 153 "inscorev2.l"
return WITH;
	YY_BREAK
/* ----------------------------------------- */
/*	math operators */
/* ----------------------------------------- */
case 10:
YY_RULE_SETUP
#line 158 "inscorev2.l"
return ADD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 159 "inscorev2.l"
return SUB;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 160 "inscorev2.l"
return DIV;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 161 "inscorev2.l"
return MULT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 162 "inscorev2.l"
return MODULO;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 163 "inscorev2.l"
return QUEST;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 164 "inscorev2.l"
return NEG;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 165 "inscorev2.l"
return EQ;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 166 "inscorev2.l"
return GREATER;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 167 "inscorev2.l"
return GREATEREQ;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 168 "inscorev2.l"
return LESS;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 169 "inscorev2.l"
return LESSEQ;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 170 "inscorev2.l"
return MIN;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 171 "inscorev2.l"
return MAX;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 172 "inscorev2.l"
return HAS;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 174 "inscorev2.l"
return EQUAL;
	YY_BREAK
/* ----------------------------------------- */
/*	math functions */
/* ----------------------------------------- */
case 26:
YY_RULE_SETUP
#line 179 "inscorev2.l"
return COS;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 180 "inscorev2.l"
return SIN;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 181 "inscorev2.l"
return TAN;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 182 "inscorev2.l"
return ACOS;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 183 "inscorev2.l"
return ASIN;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 184 "inscorev2.l"
return ATAN;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 185 "inscorev2.l"
return COSH;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 186 "inscorev2.l"
return SINH;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 187 "inscorev2.l"
return TANH;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 188 "inscorev2.l"
return ACOSH;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 189 "inscorev2.l"
return ASINH;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 190 "inscorev2.l"
return ATANH;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 192 "inscorev2.l"
return EXP;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 193 "inscorev2.l"
return LOG;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 194 "inscorev2.l"
return LOG10;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 195 "inscorev2.l"
return LOG2;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 196 "inscorev2.l"
return POW;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 197 "inscorev2.l"
return SQRT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 198 "inscorev2.l"
return CBRT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 200 "inscorev2.l"
return CEIL;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 201 "inscorev2.l"
return FLOOR;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 202 "inscorev2.l"
return ROUND;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 204 "inscorev2.l"
return RAND;
	YY_BREAK
/* ----------------------------------------- */
/*	delimiters */
/* ----------------------------------------- */
case 49:
YY_RULE_SETUP
#line 210 "inscorev2.l"
return SLASH;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 211 "inscorev2.l"
return LEFTPAR;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 212 "inscorev2.l"
return RIGHTPAR;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 213 "inscorev2.l"
return LEFTBRACE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 214 "inscorev2.l"
return RIGHTBRACE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 215 "inscorev2.l"
return LEFTBRACKET;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 216 "inscorev2.l"
return RIGHTBRACKET;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 217 "inscorev2.l"
return ENDSTATEMENT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 218 "inscorev2.l"
return COLON;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 219 "inscorev2.l"
return COMMA;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 220 "inscorev2.l"
return LDOTS;
	YY_BREAK
/* ----------------------------------------- */
/*	comments */
/* ----------------------------------------- */
case 60:
YY_RULE_SETUP
#line 226 "inscorev2.l"
;
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 227 "inscorev2.l"
;
	YY_BREAK
/* ----------------------------------------- */
/*	identifiers, strings  */
/* ----------------------------------------- */
case 62:
YY_RULE_SETUP
#line 233 "inscorev2.l"
yyextra->fText = yytext; return LETTERS;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 234 "inscorev2.l"
yyextra->fText = yytext; return IDENTIFIER;
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 235 "inscorev2.l"
yyextra->fText = unescape(unquote(yytext)); return STRING;
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 236 "inscorev2.l"
yyextra->fText = unescape(unquote(yytext)); return STRING;
	YY_BREAK
/* ----------------------------------------- */
/*	variables */
/* ----------------------------------------- */
case 66:
YY_RULE_SETUP
#line 241 "inscorev2.l"
yyextra->fText = &yytext[1]; return VARIABLE;
	YY_BREAK
/* ----------------------------------------- */
/*	regular expressions */
/* ----------------------------------------- */
case 67:
YY_RULE_SETUP
#line 247 "inscorev2.l"
yyextra->fText = yytext; return REGEXP;	
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 248 "inscorev2.l"
yyextra->fText = yytext; return REGEXP;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 249 "inscorev2.l"
yyextra->fText = yytext; return REGEXP;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 250 "inscorev2.l"
yyextra->fText = yytext; return ANYADDR;
	YY_BREAK
/* ----------------------------------------- */
/*	expanded identifiers */
/* ----------------------------------------- */
case 71:
YY_RULE_SETUP
#line 255 "inscorev2.l"
yyextra->fText = yytext; return EXPANDID;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 256 "inscorev2.l"
yyextra->fText = yytext; return EXPANDID;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 257 "inscorev2.l"
yyextra->fText = yytext; return EXPANDID;
	YY_BREAK
/* ----------------------------------------- */
/*	javascript section */
/* ----------------------------------------- */
case 74:
YY_RULE_SETUP
#line 262 "inscorev2.l"
BEGIN JSECTION;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 263 "inscorev2.l"
BEGIN INITIAL;
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 264 "inscorev2.l"
yyextra->fText = unescape(yytext); return JSCRIPT;
	YY_BREAK
/* ----------------------------------------- */
/*	hostname and IP */
/* ----------------------------------------- */
case 77:
YY_RULE_SETUP
#line 269 "inscorev2.l"
yyextra->fText = yytext; return URLPREFIX;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 270 "inscorev2.l"
yyextra->fText = yytext; return URLPREFIX;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 271 "inscorev2.l"
yyextra->fText = yytext; return URLPREFIX;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 274 "inscorev2.l"
;   /* eat up space */
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 275 "inscorev2.l"
{ yyextra->fColumn = yylloc->first_column = 1; } 	/* return EOL;  eat up end of line */
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(JSECTION):
#line 277 "inscorev2.l"
return ENDSCRIPT;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 279 "inscorev2.l"
yyextra->fText = yytext; ldebug("ERR", yyextra->fText); return ERR;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 281 "inscorev2.l"
ECHO;
	YY_BREAK
#line 1966 "inscorelex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 267 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 267 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 266);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 281 "inscorev2.l"


namespace inscore2
{

void IParser::initScanner()
{
	yylex_init(&fScanner);
	yyset_extra(this, fScanner);
}

void IParser::destroyScanner()
{
	yylex_destroy(fScanner);
}

} // end namespace


