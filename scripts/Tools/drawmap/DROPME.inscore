
<?javascript
	var gMap = new Array();
	var gRect = {};
	var addrBase;
	var endl = ";\n";
	var color = " color 120 220 120 100 ";
	var gIndex = 0;
	var gTime;

	function adjust(target, xi, x, yi, y) {
		var msg = new Array();
		msg[0] = target + " width " + (x - xi)  + endl;
		msg[1] = target + " height " + (y - yi) + endl;
		return msg;
	}

	function interval(a, b) {
		var ival = {};
		ival.start 	= Math.round((a < b) ? a : b);
		ival.end	= Math.round((a < b) ? b : a);
		return ival;
	}
	
	function graphicSegment(xi, x, yi, y) {
		var seg = {};
		seg.x = interval(xi, x);
		seg.y = interval(yi, y);
		return seg;
	}
	
	function intervalStr(i) 		{ return "[" + i.start + ", " + i.end +"["; }
	function rationalStr(n) 		{ return "" + n + "/4"; }
	function timeSegmentStr(n) { 
		var i = {}
		i.start = rationalStr(n);
		i.end  	= rationalStr(n+1);
		return "(" + intervalStr(i) + ")"; 
	}
	function graphicSegmentStr(seg)	{ return "(" + intervalStr(seg.x) + " " + intervalStr(seg.y) +")"; }
	function relationStr(n) 		{ return graphicSegmentStr(gMap[n]) + " " + timeSegmentStr(n); }

	function start(scene, absX, absY, x, y) {
		addrBase = "/ITL/" + scene + "/_rect_";
		gRect.target = addrBase + gIndex;
		gRect.ax = absX;
		gRect.ay = absY;
		gRect.rx = x;
		gRect.ry = y;
		gTime = new Date().getTime();
		
		var msg = new Array();
		var i=0;
		msg[i++] = gRect.target + " set rect 0. 0." + endl;
		msg[i++] = gRect.target + " xorigin -1." + endl;
		msg[i++] = gRect.target + " yorigin -1." + endl;
		msg[i++] = gRect.target + " x " + gRect.rx + endl;
		msg[i++] = gRect.target + " y " + gRect.ry + endl;
		msg[i++] = gRect.target + color + endl;
		return msg;
	}

	function move(x, y) {
		return adjust (gRect.target, gRect.rx, x, gRect.ry, y);
	}

	function stop(absX, absY, x, y) {
		var msg = adjust (gRect.target, gRect.rx, x, gRect.ry, y);
		gMap[gIndex++] = graphicSegment(gRect.ax, absX, gRect.ay, absY);
//		return "/ITL/log write elapsed " + (new Date().getTime() - gTime) + endl;
	}

	function reset() {
		if (!gIndex) return;
		gMap = new Array();
		gIndex = 0;
		return addrBase + "* del" + endl;
	}

	function undo() {
		if (gIndex > 0) {
			gIndex--;
			return addrBase + gIndex + " del" + endl;
		}
	}

	function getMap() {
		if (!gIndex) return;
		var msg = new Array();
		for (n=0; n<gIndex; n++) {
			msg[n] = "/ITL/log write '" + relationStr(n) + "'" + endl;
		}
		return msg;
	}

?>

/ITL/log show 1;


/ITL/scene watch START (
	/ITL/scene/* watch mouseDown 
		(/ITL/scene/javascript run "start('$scene', $absx, $absy, $sx, $sy)" ),
	/ITL/scene/* watch mouseMove 
		(/ITL/scene/javascript run "move($sx, $sy)" ),
	/ITL/scene/* watch mouseUp 
		(/ITL/scene/javascript run "stop($absx, $absy, $sx, $sy)" )
);

<?javascript reset() ?>

#-------------------------------------------------
# user interface design
#-------------------------------------------------
colorOn 	= 240 50 50;
colorOff 	= 130 130 130;

/ITL/drawmap new;
/ITL/drawmap width 0.5;
/ITL/drawmap height 0.5;

/ITL/drawmap/_ui_reset 		set txt "Reset";
/ITL/drawmap/_ui_undo 		set txt "Undo";
/ITL/drawmap/_ui_print 		set txt "Print";
/ITL/drawmap/_ui_restart 	set txt "Restart";
/ITL/drawmap/_ui_help 		set txt "Help";
/ITL/drawmap/_ui_* fontFamily 	Arial;
/ITL/drawmap/_ui_* fontSize 	56;
/ITL/drawmap/_ui_* color $colorOff;
/ITL/drawmap/_ui_print y -0.5;
/ITL/drawmap/_ui_reset y -0.25;
/ITL/drawmap/_ui_undo y 0.0;
/ITL/drawmap/_ui_restart y 0.25;
/ITL/drawmap/_ui_help y 0.5;

/ITL/drawmap/_ui_* watch ;

/ITL/drawmap/_ui_* watch mouseEnter (/ITL/drawmap/$self color $colorOn);
/ITL/drawmap/_ui_* watch mouseLeave (/ITL/drawmap/$self color $colorOff);

/ITL/drawmap/_ui_print		watch mouseDown	( /ITL/scene/javascript run "getMap()");
/ITL/drawmap/_ui_reset		watch mouseUp 	( /ITL/scene/javascript run "reset()");
/ITL/drawmap/_ui_undo  		watch mouseUp 	( /ITL/scene/javascript run "undo()");
/ITL/drawmap/_ui_restart  	watch mouseDown ( /ITL/scene/javascript run "reset()", /ITL/scene event START);
/ITL/drawmap/_ui_help  		watch mouseDown ( /ITL browse "README.html", /ITL/drawmap/$self color $colorOff);

/ITL/scene event START;


#-------------------------------------------------
# user interface design
#-------------------------------------------------
# require without associated message only generates a message on std::cerr and on osc err stream
required = 1.07;
/ITL require $required  (
	/ITL/scene/msg set txt "This script requires INScore version" $required "current version is" "$version",
	/ITL/scene/msg angle 45,
	/ITL/scene/msg scale 2.0
	);
